--- odamex-0.4.4.orig/Makefile
+++ odamex-0.4.4/Makefile
@@ -1,326 +1,326 @@
-# Setup tools
-SHELL = /bin/sh
-OBJDIR = obj
-# denis - fixme - remove mkdir -p
-MKDIR = mkdir -p
-CC = g++
-LD = g++
-INSTALL = cp
-DEUTEX = deutex
-
-# Detect OS
-win32     := false
-freebsd   := false
-linux     := false
-mingw	  := false
-bigendian := false
-cygwin	  := false
-osx     := false
-solaris	:= false
-
-ifneq ($(strip $(shell $(CC) -v 2>&1 |grep "FreeBSD")),)
- freebsd = true
-endif
-
-ifneq ($(strip $(shell $(CC) -v 2>&1 |grep "Linux")),)
- linux = true
-endif
-
-ifneq ($(strip $(shell $(CC) -v 2>&1 |grep "linux")),)
- linux = true
-endif
-
-ifneq ($(strip $(shell $(CC) -v 2>&1 |grep "mingw")),)
- win32 = true
- mingw = true
-endif
-
-ifneq ($(strip $(shell $(CC) -v 2>&1 |grep "target=powerpc")),)
- bigendian = true
-endif
-
-ifneq ($(strip $(shell $(CC) -v 2>&1 |grep "Apple Computer, Inc")),)
- osx = true
-endif
-
-ifneq ($(strip $(shell $(CC) -v 2>&1 |grep "cygming")),)
- cygwin = true
-endif
-
-ifneq ($(strip $(shell $(CC) -v 2>&1 |grep "solaris")),)
- solaris = true
-endif
-
-# warn if using non-gnu make
-
-ifeq ($(strip $(shell make -v |grep "GNU")),)
- $(warning WARNING: You are using non-gnu make, try "gmake" if build fails)
-endif
-
-# Flags to deutex
-
-DEUTEX_FLAGS = -rgb 0 255 255 
-
-# Platform and sdl-config flags
-X11_LFLAGS = -L/usr/X11R6/lib -lX11
-
-SDL_CFLAGS_COMMAND = sdl-config --cflags
-SDL_LFLAGS_COMMAND = sdl-config --libs
-
-SDL_DETECT = sdl-config --version
-SDL_CFLAGS = $(shell $(SDL_CFLAGS_COMMAND))
-SDL_LFLAGS = $(shell $(SDL_LFLAGS_COMMAND)) $(X11_LFLAGS)
-
-CFLAGS_PLATFORM = -DUNIX
-LFLAGS_PLATFORM =
-
-ifeq ($(strip $(osx)), true)
-# osx does not use X11 for copy&paste, it uses Carbon
-CFLAGS_PLATFORM = -DUNIX -DOSX
-LFLAGS_PLATFORM =
-OSX_FRAMEWORKS = -framework Carbon -framework AudioToolbox -framework AudioUnit
-SDL_LFLAGS := $(SDL_LFLAGS) $(OSX_FRAMEWORKS)
-X11_LFLAGS = 
-endif
-
-ifeq ($(strip $(freebsd)), true)
-ifeq ($(SDL_CFLAGS),)
-SDL_CFLAGS_COMMAND = sdl11-config --cflags
-SDL_LFLAGS_COMMAND = sdl11-config --libs
-SDL_CFLAGS = $(shell $(SDL_CFLAGS_COMMAND))
-SDL_LFLAGS = $(shell $(SDL_LFLAGS_COMMAND)) $(X11_LFLAGS)
-endif
-endif
-
-ifeq ($(strip $(cygwin)), true)
-SDL_LOCATION = ../SDL-1.2.11
-SDL_MIXER_LOCATION = ../SDL_mixer-1.2.7
-SDL_DETECT = echo "Assumed SDL is in $(SDL_LOCATION) and SDL_mixer is in $(SDL_MIXER_LOCATION)"
-SDL_CFLAGS_COMMAND =
-SDL_LFLAGS_COMMAND =
-SDL_CFLAGS = -I$(SDL_LOCATION)/include -I$(SDL_MIXER_LOCATION)/include
-SDL_LFLAGS = -L$(SDL_LOCATION)/lib -lSDL -L$(SDL_MIXER_LOCATION)/lib
-endif
-
-ifeq ($(strip $(win32)), true)
-LFLAGS_PLATFORM = -lwsock32
-CFLAGS_PLATFORM = -DWIN32 -D_WIN32
-endif
-
-ifeq ($(strip $(linux)), true)
-CFLAGS_PLATFORM = -DUNIX -DLINUX
-endif
-
-ifeq ($(strip $(solaris)), true)
-LFLAGS_PLATFORM = -lsocket -lnsl
-CFLAGS_PLATFORM = -DSOLARIS -DUNIX -DBSD_COMP -gstabs+
-endif
-
-ifeq ($(strip $(bigendian)), true)
-CFLAGS_PLATFORM := $(CFLAGS_PLATFORM) -D__BIG_ENDIAN__
-endif
-
-# Directories
-BINDIR = .
-INSTALLDIR = /usr/local/bin
-RESDIR = /usr/local/share
-
-# Common
-COMMON_DIR = common
-COMMON_HEADERS = $(wildcard $(COMMON_DIR)/*.h)
-COMMON_SOURCES = $(wildcard $(COMMON_DIR)/*.cpp)
-COMMON_OBJS = $(patsubst $(COMMON_DIR)/%.cpp,$(OBJDIR)/$(COMMON_DIR)/%.o,$(COMMON_SOURCES))
-COMMON_OBJS_SERVER = $(patsubst $(COMMON_DIR)/%.cpp,$(OBJDIR)/$(COMMON_DIR)/server_%.o,$(COMMON_SOURCES))
-COMMON_OBJS_CLIENT = $(patsubst $(COMMON_DIR)/%.cpp,$(OBJDIR)/$(COMMON_DIR)/client_%.o,$(COMMON_SOURCES))
-
-# Server
-SERVER_DIR = server/src
-SERVER_HEADERS = $(wildcard $(SERVER_DIR)/*.h)
-SERVER_SOURCES = $(wildcard $(SERVER_DIR)/*.cpp)
-SERVER_OBJS = $(patsubst $(SERVER_DIR)/%.cpp,$(OBJDIR)/$(SERVER_DIR)/%.o,$(SERVER_SOURCES))
-SERVER_TARGET = $(BINDIR)/odasrv
-SERVER_CFLAGS = -I../server/src -Iserver/src
-SERVER_LFLAGS =
-
-# Client
-CLIENT_DIR = client/src
-CLIENT_HEADERS = $(wildcard $(CLIENT_DIR)/*.h)
-CLIENT_SOURCES = $(wildcard $(CLIENT_DIR)/*.cpp)
-CLIENT_OBJS = $(patsubst $(CLIENT_DIR)/%.cpp,$(OBJDIR)/$(CLIENT_DIR)/%.o,$(CLIENT_SOURCES))
-CLIENT_TARGET = $(BINDIR)/odamex
-CLIENT_CFLAGS = -I../client/src -Iclient/src
-CLIENT_LFLAGS =
-
-# Master
-MASTER_DIR = master
-MASTER_HEADERS = master/i_net.h
-MASTER_SOURCES = master/i_net.cpp master/main.cpp
-MASTER_OBJS = $(patsubst $(MASTER_DIR)/%.cpp,$(OBJDIR)/$(MASTER_DIR)/%.o,$(MASTER_SOURCES))
-MASTER_TARGET = $(BINDIR)/odamaster
-MASTER_CFLAGS =
-
-# WAD file
-
-WADFILE_TARGET = $(BINDIR)/odamex.wad
-
-# Fix cygwin targets, as they will be postfixed with ".EXE"
-ifeq ($(strip $(cygwin)), true)
-SERVER_TARGET := $(SERVER_TARGET).exe
-CLIENT_TARGET := $(CLIENT_TARGET).exe
-MASTER_TARGET := $(MASTER_TARGET).exe
-endif
-
-# Targets
-TARGETS = $(SERVER_TARGET) $(CLIENT_TARGET) $(MASTER_TARGET) $(WADFILE_TARGET)
-
-# denis - fixme - cflags are quite messy, but removing these is a very delicate act, also use -Wall -Werror
-CFLAGS = $(CFLAGS_PLATFORM) -DNOASM -Icommon -g -Wall -O2
-LFLAGS = $(LFLAGS_PLATFORM)
-
-CFLAGS_RELEASE = $(CFLAGS_PLATFORM) -DNOASM -Icommon -O3
-LFLAGS_RELEASE = $(LFLAGS_PLATFORM)
-
-# denis - fixme - mingw32 hack
-ifeq ("$(findstring mingw32, $(MAKE))","mingw32")
-SERVER_HEADERS_2 = $(wildcard $(SERVER_DIR)/*.h)
-SERVER_HEADERS_WIN32 = $(wildcard $(SERVER_DIR)/../win32/*.h)
-SERVER_SOURCES_2 = $(wildcard $(SERVER_DIR)/*.cpp)
-SERVER_SOURCES_WIN32 = $(wildcard $(SERVER_DIR)/../win32/*.cpp)
-SERVER_OBJS = $(patsubst $(SERVER_DIR)/%.cpp,$(OBJDIR)/$(SERVER_DIR)/%.o,$(SERVER_SOURCES_2)) $(patsubst $(SERVER_DIR)/../win32/%.cpp,$(OBJDIR)/$(SERVER_DIR)/../win32/%.o,$(SERVER_SOURCES_WIN32))
-SERVER_SOURCES = $(SERVER_SOURCES_2) $(SERVER_SOURCES_WIN32)
-SERVER_HEADERS = $(SERVER_HEADERS_2) $(SERVER_HEADERS_WIN32)
-SERVER_CFLAGS = -I../server/win32 -Iserver/win32 -I../server/src -Iserver/src
-MKDIR = echo *** PLEASE CREATE THIS DIRECTORY: 
-CFLAGS = -D_WIN32 -D_CONSOLE -DNOASM -Icommon -ggdb
-LFLAGS = -lwsock32 -lwinmm 
-endif
-# denis - end fixme - mingw32 hack
-
-# denis - fixme - sdl client hack for linux
-CLIENT_HEADERS_2 = $(wildcard $(CLIENT_DIR)/*.h)
-CLIENT_HEADERS_WIN32 = $(wildcard $(CLIENT_DIR)/../sdl/*.h)
-CLIENT_SOURCES_2 = $(wildcard $(CLIENT_DIR)/*.cpp)
-CLIENT_SOURCES_WIN32 = $(wildcard $(CLIENT_DIR)/../sdl/*.cpp)
-CLIENT_OBJS = $(patsubst $(CLIENT_DIR)/%.cpp,$(OBJDIR)/$(CLIENT_DIR)/%.o,$(CLIENT_SOURCES_2)) $(patsubst $(CLIENT_DIR)/../sdl/%.cpp,$(OBJDIR)/$(CLIENT_DIR)/../sdl/%.o,$(CLIENT_SOURCES_WIN32))
-CLIENT_SOURCES = $(CLIENT_SOURCES_2) $(CLIENT_SOURCES_WIN32)
-CLIENT_HEADERS = $(CLIENT_HEADERS_2) $(CLIENT_HEADERS_WIN32)
-CLIENT_CFLAGS = -I../client/sdl -Iclient/sdl -I../client/src -Iclient/src $(SDL_CFLAGS)
-CLIENT_LFLAGS =  $(SDL_LFLAGS) -lSDL_mixer
-#-ldmalloc
-# denis - end fixme
-
-# All
-all: $(SERVER_TARGET) $(CLIENT_TARGET) $(MASTER_TARGET) $(WADFILE_TARGET)
-
-# Common for server
-$(OBJDIR)/$(COMMON_DIR)/server_%.o: $(COMMON_DIR)/%.cpp $(COMMON_HEADERS) $(SERVER_HEADERS)
-	@$(MKDIR) $(dir $@)
-	$(CC) $(CFLAGS) $(SERVER_CFLAGS) -c $< -o $@
-
-# Common for client
-$(OBJDIR)/$(COMMON_DIR)/client_%.o: $(COMMON_DIR)/%.cpp $(COMMON_HEADERS) $(CLIENT_HEADERS)
-	@$(MKDIR) $(dir $@)
-	$(CC) $(CFLAGS) $(CLIENT_CFLAGS) -c $< -o $@
-
-# Client
-client: $(CLIENT_TARGET)
-	@echo Detected SDL: $(shell $(SDL_DETECT))
-
-$(CLIENT_TARGET): $(COMMON_OBJS_CLIENT) $(CLIENT_OBJS)
-	$(LD) $(CLIENT_OBJS) $(COMMON_OBJS_CLIENT) $(CLIENT_LFLAGS) $(LFLAGS) -o $(CLIENT_TARGET)
-
-$(OBJDIR)/$(CLIENT_DIR)/%.o: $(CLIENT_DIR)/%.cpp $(CLIENT_HEADERS) $(COMMON_HEADERS)
-ifeq ($(SDL_CFLAGS),)
-	@echo Make sure SDL is installed and sdl-config is accessible
-	@exit 2
-endif
-	@$(MKDIR) $(dir $@)
-	$(CC) $(CFLAGS) $(CLIENT_CFLAGS) -c $< -o $@
-
-# Server
-server: $(SERVER_TARGET)
-$(SERVER_TARGET): $(COMMON_OBJS_SERVER) $(SERVER_OBJS)
-	$(LD) $(SERVER_OBJS) $(COMMON_OBJS_SERVER) $(SERVER_LFLAGS) $(LFLAGS) -o $(SERVER_TARGET)
-
-$(OBJDIR)/$(SERVER_DIR)/%.o: $(SERVER_DIR)/%.cpp $(SERVER_HEADERS) $(COMMON_HEADERS)
-	@$(MKDIR) $(dir $@)
-	$(CC) $(CFLAGS) $(SERVER_CFLAGS) -c $< -o $@
-
-# Master
-master: $(MASTER_TARGET)
-$(MASTER_TARGET): $(MASTER_OBJS)
-	$(LD) $(LFLAGS) $(MASTER_OBJS) -o $(MASTER_TARGET)
-
-$(OBJDIR)/$(MASTER_DIR)/%.o: $(MASTER_DIR)/%.cpp
-	@$(MKDIR) $(dir $@)
-	$(CC) $(MASTER_CFLAGS) $(CFLAGS) -c $< -o $@
-
-$(WADFILE_TARGET) :
-	(cd wad; $(DEUTEX) $(DEUTEX_FLAGS) -doom2 bootstrap -build wadinfo.txt ../$@)
-
-odalaunch/odalaunch:
-	cd odalaunch && make && cd ..
-
-# Checker
-check: test
-test: server client
-	tests/all.tcl
-
-# Installer
-install: $(CLIENT_TARGET) $(SERVER_TARGET) odalaunch/odalaunch
-	$(MKDIR) $(INSTALLDIR)
-	$(INSTALL) $(SERVER_TARGET) $(INSTALLDIR)
-	$(INSTALL) $(CLIENT_TARGET) $(INSTALLDIR)
-	$(INSTALL) odalaunch/odalaunch $(INSTALLDIR)
-	$(MKDIR) $(RESDIR)/doom
-	cp odamex.wad $(RESDIR)/doom
-
-uninstall:
-	rm $(INSTALLDIR)/$(CLIENT_TARGET)
-	rm $(INSTALLDIR)/$(SERVER_TARGET)
-	rm $(INSTALLDIR)/$(MASTER_TARGET)
-	rm $(INSTALLDIR)/odalaunch
-	rm $(RESDIR)/doom/odamex.wad
-
-install-res: 
-	$(MKDIR) $(RESDIR)
-	$(INSTALL) $(BINDIR)/media/icon_odamex_96.png $(RESDIR)/pixmaps/odamex.png
-	$(INSTALL) $(BINDIR)/media/icon_odasrv_96.png $(RESDIR)/pixmaps/odasrv.png
-	$(INSTALL) $(BINDIR)/media/icon_odalaunch_96.png $(RESDIR)/pixmaps/odalaunch.png
-	$(INSTALL) $(BINDIR)/installer/arch/odamex.desktop $(RESDIR)/applications
-	$(INSTALL) $(BINDIR)/installer/arch/odalaunch.desktop $(RESDIR)/applications
-
-uninstall-res:
-	rm $(RESDIR)/pixmaps/odalaunch.png
-	rm $(RESDIR)/pixmaps/odamex.png
-	rm $(RESDIR)/pixmaps/odasrv.png
-	rm $(RESDIR)/applications/odamex.desktop
-	rm $(RESDIR)/applications/odalaunch.desktop
-
-# Clean
-clean:
-	@rm -rf $(COMMON_OBJS_CLIENT) $(COMMON_OBJS_SERVER) $(SERVER_OBJS) $(CLIENT_OBJS) $(MASTER_OBJS)
-	@rm -rf $(CLIENT_TARGET)
-	@rm -rf $(SERVER_TARGET)
-	@rm -rf $(MASTER_TARGET)
-
-# Help
-help:
-	@echo ============================
-	@echo Odamex Makefile help
-	@echo	============================
-	@echo To build EVERYTHING: make
-	@echo To build $(SERVER_TARGET): make server
-	@echo To build $(CLIENT_TARGET): make client
-	@echo To build $(MASTER_TARGET): make master
-	@echo To remove built files: make clean
-	@echo To install built binaries: make install
-	@echo To install resources: make install-res
-	@echo To uninstall resources: make uninstall-res
-	@echo To uninstall binaries: make uninstall
-	@echo	----------------------------
-	@echo Binaries will be built in: $(BINDIR)
-	@echo Object files will be located in: $(OBJDIR) 
-	@echo Binaries will be installed on the system in: $(INSTALLDIR)
-	@echo Resources will be installed in: $(RESDIR)
-
+# Setup tools
+SHELL = /bin/sh
+OBJDIR = obj
+# denis - fixme - remove mkdir -p
+MKDIR = mkdir -p
+CC = g++
+LD = g++
+INSTALL = cp
+DEUTEX = deutex
+
+# Detect OS
+win32     := false
+freebsd   := false
+linux     := false
+mingw	  := false
+bigendian := false
+cygwin	  := false
+osx     := false
+solaris	:= false
+
+ifneq ($(strip $(shell $(CC) -v 2>&1 |grep "FreeBSD")),)
+ freebsd = true
+endif
+
+ifneq ($(strip $(shell $(CC) -v 2>&1 |grep "Linux")),)
+ linux = true
+endif
+
+ifneq ($(strip $(shell $(CC) -v 2>&1 |grep "linux")),)
+ linux = true
+endif
+
+ifneq ($(strip $(shell $(CC) -v 2>&1 |grep "mingw")),)
+ win32 = true
+ mingw = true
+endif
+
+ifneq ($(strip $(shell $(CC) -v 2>&1 |grep "target=powerpc")),)
+ bigendian = true
+endif
+
+ifneq ($(strip $(shell $(CC) -v 2>&1 |grep "Apple Computer, Inc")),)
+ osx = true
+endif
+
+ifneq ($(strip $(shell $(CC) -v 2>&1 |grep "cygming")),)
+ cygwin = true
+endif
+
+ifneq ($(strip $(shell $(CC) -v 2>&1 |grep "solaris")),)
+ solaris = true
+endif
+
+# warn if using non-gnu make
+
+ifeq ($(strip $(shell make -v |grep "GNU")),)
+ $(warning WARNING: You are using non-gnu make, try "gmake" if build fails)
+endif
+
+# Flags to deutex
+
+DEUTEX_FLAGS = -rgb 0 255 255 
+
+# Platform and sdl-config flags
+X11_LFLAGS = -L/usr/X11R6/lib -lX11
+
+SDL_CFLAGS_COMMAND = sdl-config --cflags
+SDL_LFLAGS_COMMAND = sdl-config --libs
+
+SDL_DETECT = sdl-config --version
+SDL_CFLAGS = $(shell $(SDL_CFLAGS_COMMAND))
+SDL_LFLAGS = $(shell $(SDL_LFLAGS_COMMAND)) $(X11_LFLAGS)
+
+CFLAGS_PLATFORM = -DUNIX
+LFLAGS_PLATFORM =
+
+ifeq ($(strip $(osx)), true)
+# osx does not use X11 for copy&paste, it uses Carbon
+CFLAGS_PLATFORM = -DUNIX -DOSX
+LFLAGS_PLATFORM =
+OSX_FRAMEWORKS = -framework Carbon -framework AudioToolbox -framework AudioUnit
+SDL_LFLAGS := $(SDL_LFLAGS) $(OSX_FRAMEWORKS)
+X11_LFLAGS = 
+endif
+
+ifeq ($(strip $(freebsd)), true)
+ifeq ($(SDL_CFLAGS),)
+SDL_CFLAGS_COMMAND = sdl11-config --cflags
+SDL_LFLAGS_COMMAND = sdl11-config --libs
+SDL_CFLAGS = $(shell $(SDL_CFLAGS_COMMAND))
+SDL_LFLAGS = $(shell $(SDL_LFLAGS_COMMAND)) $(X11_LFLAGS)
+endif
+endif
+
+ifeq ($(strip $(cygwin)), true)
+SDL_LOCATION = ../SDL-1.2.11
+SDL_MIXER_LOCATION = ../SDL_mixer-1.2.7
+SDL_DETECT = echo "Assumed SDL is in $(SDL_LOCATION) and SDL_mixer is in $(SDL_MIXER_LOCATION)"
+SDL_CFLAGS_COMMAND =
+SDL_LFLAGS_COMMAND =
+SDL_CFLAGS = -I$(SDL_LOCATION)/include -I$(SDL_MIXER_LOCATION)/include
+SDL_LFLAGS = -L$(SDL_LOCATION)/lib -lSDL -L$(SDL_MIXER_LOCATION)/lib
+endif
+
+ifeq ($(strip $(win32)), true)
+LFLAGS_PLATFORM = -lwsock32
+CFLAGS_PLATFORM = -DWIN32 -D_WIN32
+endif
+
+ifeq ($(strip $(linux)), true)
+CFLAGS_PLATFORM = -DUNIX -DLINUX
+endif
+
+ifeq ($(strip $(solaris)), true)
+LFLAGS_PLATFORM = -lsocket -lnsl
+CFLAGS_PLATFORM = -DSOLARIS -DUNIX -DBSD_COMP -gstabs+
+endif
+
+ifeq ($(strip $(bigendian)), true)
+CFLAGS_PLATFORM := $(CFLAGS_PLATFORM) -D__BIG_ENDIAN__
+endif
+
+# Directories
+BINDIR = .
+INSTALLDIR = $(PWD)/debian/odamex/usr/games
+RESDIR = $(PWD)/debian/odamex/usr/share
+
+# Common
+COMMON_DIR = common
+COMMON_HEADERS = $(wildcard $(COMMON_DIR)/*.h)
+COMMON_SOURCES = $(wildcard $(COMMON_DIR)/*.cpp)
+COMMON_OBJS = $(patsubst $(COMMON_DIR)/%.cpp,$(OBJDIR)/$(COMMON_DIR)/%.o,$(COMMON_SOURCES))
+COMMON_OBJS_SERVER = $(patsubst $(COMMON_DIR)/%.cpp,$(OBJDIR)/$(COMMON_DIR)/server_%.o,$(COMMON_SOURCES))
+COMMON_OBJS_CLIENT = $(patsubst $(COMMON_DIR)/%.cpp,$(OBJDIR)/$(COMMON_DIR)/client_%.o,$(COMMON_SOURCES))
+
+# Server
+SERVER_DIR = server/src
+SERVER_HEADERS = $(wildcard $(SERVER_DIR)/*.h)
+SERVER_SOURCES = $(wildcard $(SERVER_DIR)/*.cpp)
+SERVER_OBJS = $(patsubst $(SERVER_DIR)/%.cpp,$(OBJDIR)/$(SERVER_DIR)/%.o,$(SERVER_SOURCES))
+SERVER_TARGET = $(BINDIR)/odasrv
+SERVER_CFLAGS = -I../server/src -Iserver/src
+SERVER_LFLAGS =
+
+# Client
+CLIENT_DIR = client/src
+CLIENT_HEADERS = $(wildcard $(CLIENT_DIR)/*.h)
+CLIENT_SOURCES = $(wildcard $(CLIENT_DIR)/*.cpp)
+CLIENT_OBJS = $(patsubst $(CLIENT_DIR)/%.cpp,$(OBJDIR)/$(CLIENT_DIR)/%.o,$(CLIENT_SOURCES))
+CLIENT_TARGET = $(BINDIR)/odamex
+CLIENT_CFLAGS = -I../client/src -Iclient/src
+CLIENT_LFLAGS =
+
+# Master
+MASTER_DIR = master
+MASTER_HEADERS = master/i_net.h
+MASTER_SOURCES = master/i_net.cpp master/main.cpp
+MASTER_OBJS = $(patsubst $(MASTER_DIR)/%.cpp,$(OBJDIR)/$(MASTER_DIR)/%.o,$(MASTER_SOURCES))
+MASTER_TARGET = $(BINDIR)/odamaster
+MASTER_CFLAGS =
+
+# WAD file
+
+WADFILE_TARGET = $(BINDIR)/odamex.wad
+
+# Fix cygwin targets, as they will be postfixed with ".EXE"
+ifeq ($(strip $(cygwin)), true)
+SERVER_TARGET := $(SERVER_TARGET).exe
+CLIENT_TARGET := $(CLIENT_TARGET).exe
+MASTER_TARGET := $(MASTER_TARGET).exe
+endif
+
+# Targets
+TARGETS = $(SERVER_TARGET) $(CLIENT_TARGET) $(MASTER_TARGET) $(WADFILE_TARGET)
+
+# denis - fixme - cflags are quite messy, but removing these is a very delicate act, also use -Wall -Werror
+CFLAGS = $(CFLAGS_PLATFORM) -DNOASM -Icommon -g -Wall -O2
+LFLAGS = $(LFLAGS_PLATFORM)
+
+CFLAGS_RELEASE = $(CFLAGS_PLATFORM) -DNOASM -Icommon -O3
+LFLAGS_RELEASE = $(LFLAGS_PLATFORM)
+
+# denis - fixme - mingw32 hack
+ifeq ("$(findstring mingw32, $(MAKE))","mingw32")
+SERVER_HEADERS_2 = $(wildcard $(SERVER_DIR)/*.h)
+SERVER_HEADERS_WIN32 = $(wildcard $(SERVER_DIR)/../win32/*.h)
+SERVER_SOURCES_2 = $(wildcard $(SERVER_DIR)/*.cpp)
+SERVER_SOURCES_WIN32 = $(wildcard $(SERVER_DIR)/../win32/*.cpp)
+SERVER_OBJS = $(patsubst $(SERVER_DIR)/%.cpp,$(OBJDIR)/$(SERVER_DIR)/%.o,$(SERVER_SOURCES_2)) $(patsubst $(SERVER_DIR)/../win32/%.cpp,$(OBJDIR)/$(SERVER_DIR)/../win32/%.o,$(SERVER_SOURCES_WIN32))
+SERVER_SOURCES = $(SERVER_SOURCES_2) $(SERVER_SOURCES_WIN32)
+SERVER_HEADERS = $(SERVER_HEADERS_2) $(SERVER_HEADERS_WIN32)
+SERVER_CFLAGS = -I../server/win32 -Iserver/win32 -I../server/src -Iserver/src
+MKDIR = echo *** PLEASE CREATE THIS DIRECTORY: 
+CFLAGS = -D_WIN32 -D_CONSOLE -DNOASM -Icommon -ggdb
+LFLAGS = -lwsock32 -lwinmm 
+endif
+# denis - end fixme - mingw32 hack
+
+# denis - fixme - sdl client hack for linux
+CLIENT_HEADERS_2 = $(wildcard $(CLIENT_DIR)/*.h)
+CLIENT_HEADERS_WIN32 = $(wildcard $(CLIENT_DIR)/../sdl/*.h)
+CLIENT_SOURCES_2 = $(wildcard $(CLIENT_DIR)/*.cpp)
+CLIENT_SOURCES_WIN32 = $(wildcard $(CLIENT_DIR)/../sdl/*.cpp)
+CLIENT_OBJS = $(patsubst $(CLIENT_DIR)/%.cpp,$(OBJDIR)/$(CLIENT_DIR)/%.o,$(CLIENT_SOURCES_2)) $(patsubst $(CLIENT_DIR)/../sdl/%.cpp,$(OBJDIR)/$(CLIENT_DIR)/../sdl/%.o,$(CLIENT_SOURCES_WIN32))
+CLIENT_SOURCES = $(CLIENT_SOURCES_2) $(CLIENT_SOURCES_WIN32)
+CLIENT_HEADERS = $(CLIENT_HEADERS_2) $(CLIENT_HEADERS_WIN32)
+CLIENT_CFLAGS = -I../client/sdl -Iclient/sdl -I../client/src -Iclient/src $(SDL_CFLAGS)
+CLIENT_LFLAGS =  $(SDL_LFLAGS) -lSDL_mixer
+#-ldmalloc
+# denis - end fixme
+
+# All
+all: $(SERVER_TARGET) $(CLIENT_TARGET) $(MASTER_TARGET) $(WADFILE_TARGET)
+
+# Common for server
+$(OBJDIR)/$(COMMON_DIR)/server_%.o: $(COMMON_DIR)/%.cpp $(COMMON_HEADERS) $(SERVER_HEADERS)
+	@$(MKDIR) $(dir $@)
+	$(CC) $(CFLAGS) $(SERVER_CFLAGS) -c $< -o $@
+
+# Common for client
+$(OBJDIR)/$(COMMON_DIR)/client_%.o: $(COMMON_DIR)/%.cpp $(COMMON_HEADERS) $(CLIENT_HEADERS)
+	@$(MKDIR) $(dir $@)
+	$(CC) $(CFLAGS) $(CLIENT_CFLAGS) -c $< -o $@
+
+# Client
+client: $(CLIENT_TARGET)
+	@echo Detected SDL: $(shell $(SDL_DETECT))
+
+$(CLIENT_TARGET): $(COMMON_OBJS_CLIENT) $(CLIENT_OBJS)
+	$(LD) $(CLIENT_OBJS) $(COMMON_OBJS_CLIENT) $(CLIENT_LFLAGS) $(LFLAGS) -o $(CLIENT_TARGET)
+
+$(OBJDIR)/$(CLIENT_DIR)/%.o: $(CLIENT_DIR)/%.cpp $(CLIENT_HEADERS) $(COMMON_HEADERS)
+ifeq ($(SDL_CFLAGS),)
+	@echo Make sure SDL is installed and sdl-config is accessible
+	@exit 2
+endif
+	@$(MKDIR) $(dir $@)
+	$(CC) $(CFLAGS) $(CLIENT_CFLAGS) -c $< -o $@
+
+# Server
+server: $(SERVER_TARGET)
+$(SERVER_TARGET): $(COMMON_OBJS_SERVER) $(SERVER_OBJS)
+	$(LD) $(SERVER_OBJS) $(COMMON_OBJS_SERVER) $(SERVER_LFLAGS) $(LFLAGS) -o $(SERVER_TARGET)
+
+$(OBJDIR)/$(SERVER_DIR)/%.o: $(SERVER_DIR)/%.cpp $(SERVER_HEADERS) $(COMMON_HEADERS)
+	@$(MKDIR) $(dir $@)
+	$(CC) $(CFLAGS) $(SERVER_CFLAGS) -c $< -o $@
+
+# Master
+master: $(MASTER_TARGET)
+$(MASTER_TARGET): $(MASTER_OBJS)
+	$(LD) $(LFLAGS) $(MASTER_OBJS) -o $(MASTER_TARGET)
+
+$(OBJDIR)/$(MASTER_DIR)/%.o: $(MASTER_DIR)/%.cpp
+	@$(MKDIR) $(dir $@)
+	$(CC) $(MASTER_CFLAGS) $(CFLAGS) -c $< -o $@
+
+$(WADFILE_TARGET) :
+	(cd wad; $(DEUTEX) $(DEUTEX_FLAGS) -doom2 bootstrap -build wadinfo.txt ../$@)
+
+odalaunch/odalaunch:
+	cd odalaunch && make && cd ..
+
+# Checker
+check: test
+test: server client
+	tests/all.tcl
+
+# Installer
+install: $(CLIENT_TARGET) $(SERVER_TARGET) odalaunch/odalaunch
+	$(MKDIR) $(INSTALLDIR)
+	$(INSTALL) $(SERVER_TARGET) $(INSTALLDIR)
+	$(INSTALL) $(CLIENT_TARGET) $(INSTALLDIR)
+	$(INSTALL) odalaunch/odalaunch $(INSTALLDIR)
+	$(MKDIR) $(RESDIR)/doom
+	cp odamex.wad $(RESDIR)/doom
+
+uninstall:
+	rm $(INSTALLDIR)/$(CLIENT_TARGET)
+	rm $(INSTALLDIR)/$(SERVER_TARGET)
+	rm $(INSTALLDIR)/$(MASTER_TARGET)
+	rm $(INSTALLDIR)/odalaunch
+	rm $(RESDIR)/doom/odamex.wad
+
+install-res: 
+	$(MKDIR) $(RESDIR)
+	$(INSTALL) $(BINDIR)/media/icon_odamex_96.png $(RESDIR)/pixmaps/odamex.png
+	$(INSTALL) $(BINDIR)/media/icon_odasrv_96.png $(RESDIR)/pixmaps/odasrv.png
+	$(INSTALL) $(BINDIR)/media/icon_odalaunch_96.png $(RESDIR)/pixmaps/odalaunch.png
+	$(INSTALL) $(BINDIR)/installer/arch/odamex.desktop $(RESDIR)/applications
+	$(INSTALL) $(BINDIR)/installer/arch/odalaunch.desktop $(RESDIR)/applications
+
+uninstall-res:
+	rm $(RESDIR)/pixmaps/odalaunch.png
+	rm $(RESDIR)/pixmaps/odamex.png
+	rm $(RESDIR)/pixmaps/odasrv.png
+	rm $(RESDIR)/applications/odamex.desktop
+	rm $(RESDIR)/applications/odalaunch.desktop
+
+# Clean
+clean:
+	@rm -rf $(COMMON_OBJS_CLIENT) $(COMMON_OBJS_SERVER) $(SERVER_OBJS) $(CLIENT_OBJS) $(MASTER_OBJS)
+	@rm -rf $(CLIENT_TARGET)
+	@rm -rf $(SERVER_TARGET)
+	@rm -rf $(MASTER_TARGET)
+
+# Help
+help:
+	@echo ============================
+	@echo Odamex Makefile help
+	@echo	============================
+	@echo To build EVERYTHING: make
+	@echo To build $(SERVER_TARGET): make server
+	@echo To build $(CLIENT_TARGET): make client
+	@echo To build $(MASTER_TARGET): make master
+	@echo To remove built files: make clean
+	@echo To install built binaries: make install
+	@echo To install resources: make install-res
+	@echo To uninstall resources: make uninstall-res
+	@echo To uninstall binaries: make uninstall
+	@echo	----------------------------
+	@echo Binaries will be built in: $(BINDIR)
+	@echo Object files will be located in: $(OBJDIR) 
+	@echo Binaries will be installed on the system in: $(INSTALLDIR)
+	@echo Resources will be installed in: $(RESDIR)
+
--- odamex-0.4.4.orig/debian/changelog
+++ odamex-0.4.4/debian/changelog
@@ -0,0 +1,6 @@
+odamex (0.4.4-1) unstable; urgency=low
+
+  * Initial packaging
+
+ -- Brian Manning <brian@portaboom.com>  Thu, 24 Jun 2010 00:29:52 -0700
+
--- odamex-0.4.4.orig/debian/compat
+++ odamex-0.4.4/debian/compat
@@ -0,0 +1 @@
+7
--- odamex-0.4.4.orig/debian/dirs
+++ odamex-0.4.4/debian/dirs
@@ -0,0 +1,2 @@
+usr/bin
+usr/sbin
--- odamex-0.4.4.orig/debian/copyright
+++ odamex-0.4.4/debian/copyright
@@ -0,0 +1,34 @@
+This package was debianized by Brian Manning <brian@portaboom.com> on
+Thu, 24 Jun 2010 00:29:52 -0700.
+
+It was downloaded from <http://odamex.net/wiki/Main_Page>
+
+Upstream Author(s):
+
+    deathz0r <deathz0r@odamex.net>
+    denis <denis@voxelsoft.com>
+    GhostlyDeath <ghostlydeath@gmail.com>
+    Hyper_Eye <mwoodj@knology.net>
+    joe <joejkennedy@gmail.com>
+
+License:
+
+    This package is free software; you can redistribute it and/or modify
+    it under the terms of the GNU General Public License as published by
+    the Free Software Foundation; either version 2 of the License, or
+    (at your option) any later version.
+
+    This package is distributed in the hope that it will be useful,
+    but WITHOUT ANY WARRANTY; without even the implied warranty of
+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+    GNU General Public License for more details.
+
+    You should have received a copy of the GNU General Public License
+    along with this package; if not, write to the Free Software
+    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301 USA
+
+On Debian systems, the complete text of the GNU General
+Public License can be found in `/usr/share/common-licenses/GPL'.
+
+The Debian packaging is (C) 2010, Brian Manning <brian@portaboom.com> and
+is licensed under the GPL, see above.
--- odamex-0.4.4.orig/debian/control
+++ odamex-0.4.4/debian/control
@@ -0,0 +1,35 @@
+Source: odamex
+Section: games
+Priority: optional
+Maintainer: Brian Manning <brian@portaboom.com>
+Build-Depends: debhelper (>= 7),  libsdl-mixer1.2-dev, libsdl-net1.2-dev, libogg-dev, libvorbis-dev, libvorbisfile3, zlib1g-dev, libwxgtk2.8-dev, wx-common
+Standards-Version: 3.8.1
+Homepage: http://edge.sourceforge.net
+
+Package: odamex
+Architecture: any
+Depends: ${shlibs:Depends}, ${misc:Depends}, libgl1-mesa-glx | libgl1, libglu1-mesa | libglu1, libpng12-0, libjpeg62, zlib1g, libsdl-mixer1.2, libsdl-net1.2
+Description: A port of the DOOM engine
+ Odamex is a free and open source port for the classic first-person-shooter
+ Doom. Odamex's goal is to emulate the feel of and retain many aspects of the
+ original Doom executables while offering a broader expanse of security
+ features, personal configuration, gameplay options, and editing features.
+ Odamex can run on a wide range of operating systems and hardware, so players
+ should be able to play on almost any platform.
+ .
+ - Client and Server environment with in-game joining
+ - Theoretical support for up to 255 players
+ - New Team Deathmatch and Capture the Flag game modes
+ - Automatic downloading and verification of WAD files from the server
+ - Map cycling support
+ - On-the-fly WAD loading:
+   - When combined with map cycling, you can create a map AND wad rotation
+     server!
+   - Wads can be loaded in single player mode too, no need to restart the
+     client.
+ - RCON (Remote Console) Support
+ - Cheating and exploitation redundancy, no longer do you have to put up with
+   cheaters!
+ - Additional higher-resolution video modes. In addition, a possible
+   "accelerated" renderer is in the works, using OpenGL to deliver an
+   experience identical to the original software renderer.
--- odamex-0.4.4.orig/debian/rules
+++ odamex-0.4.4/debian/rules
@@ -0,0 +1,84 @@
+#!/usr/bin/make -f
+# -*- makefile -*-
+# Sample debian/rules that uses debhelper.
+# This file was originally written by Joey Hess and Craig Small.
+# As a special exception, when this file is copied by dh-make into a
+# dh-make output file, you may use that output file without restriction.
+# This special exception was added by Craig Small in version 0.37 of dh-make.
+
+# Uncomment this to turn on verbose mode.
+#export DH_VERBOSE=1
+
+configure: configure-stamp
+configure-stamp:
+	dh_testdir
+	# Add here commands to configure the package.
+
+	touch configure-stamp
+
+build: build-stamp
+
+build-stamp: configure-stamp  
+	dh_testdir
+
+	# Add here commands to compile the package.
+	$(MAKE)
+	touch $@
+
+clean: 
+	dh_testdir
+	dh_testroot
+	rm -f build-stamp configure-stamp
+
+	# Add here commands to clean up after the build process.
+	$(MAKE) clean; find . -type f -name *.o -exec rm '{}' \; ; rm -rf odalaunch/odalaunch.app/; rm -f odalaunch/odalaunch
+
+	dh_clean 
+
+install: build
+	dh_testdir
+	dh_testroot
+	dh_clean -k 
+	dh_installdirs
+
+	# Add here commands to install the package into debian/odamex.
+	$(MAKE) DESTDIR=$(CURDIR)/debian/odamex install
+
+
+# Build architecture-independent files here.
+binary-indep: build install
+# We have nothing to do by default.
+
+# Build architecture-dependent files here.
+binary-arch: build install
+	dh_testdir
+	dh_testroot
+	dh_installchangelogs CHANGELOG
+	dh_installdocs
+	dh_installexamples
+#	dh_install
+#	dh_installmenu
+#	dh_installdebconf	
+#	dh_installlogrotate
+#	dh_installemacsen
+#	dh_installpam
+#	dh_installmime
+#	dh_python
+#	dh_installinit
+#	dh_installcron
+#	dh_installinfo
+	dh_installman
+	dh_link
+	dh_strip
+	dh_compress
+	dh_fixperms
+#	dh_perl
+#	dh_makeshlibs
+	dh_installdeb
+	dh_shlibdeps
+	dh_gencontrol
+	dh_md5sums
+	dh_builddeb
+
+binary: binary-indep binary-arch
+.PHONY: build clean binary-indep binary-arch binary install configure
--- odamex-0.4.4.orig/debian/docs
+++ odamex-0.4.4/debian/docs
@@ -0,0 +1,2 @@
+README
+TODO
--- odamex-0.4.4.orig/debian/odamex.doc-base.EX
+++ odamex-0.4.4/debian/odamex.doc-base.EX
@@ -0,0 +1,22 @@
+Document: odamex
+Title: Debian odamex Manual
+Author: <insert document author here>
+Abstract: This manual describes what odamex is
+ and how it can be used to
+ manage online manuals on Debian systems.
+Section: unknown
+
+Format: debiandoc-sgml
+Files: /usr/share/doc/odamex/odamex.sgml.gz
+
+Format: postscript
+Files: /usr/share/doc/odamex/odamex.ps.gz
+
+Format: text
+Files: /usr/share/doc/odamex/odamex.text.gz
+
+Format: HTML
+Index: /usr/share/doc/odamex/html/index.html
+Files: /usr/share/doc/odamex/html/*.html
+
+
--- odamex-0.4.4.orig/debian/menu
+++ odamex-0.4.4/debian/menu
@@ -0,0 +1,2 @@
+?package(odamex):needs="X11|text|vc|wm" section="Applications/see-menu-manual"\
+  title="odamex" command="/usr/bin/odamex"
--- odamex-0.4.4.orig/debian/watch
+++ odamex-0.4.4/debian/watch
@@ -0,0 +1,23 @@
+# Example watch control file for uscan
+# Rename this file to "watch" and then you can run the "uscan" command
+# to check for upstream updates and more.
+# See uscan(1) for format
+
+# Compulsory line, this is a version 3 file
+version=3
+
+# Uncomment to examine a Webpage
+# <Webpage URL> <string match>
+#http://www.example.com/downloads.php odamex-(.*)\.tar\.gz
+
+# Uncomment to examine a Webserver directory
+#http://www.example.com/pub/odamex-(.*)\.tar\.gz
+
+# Uncommment to examine a FTP server
+#ftp://ftp.example.com/pub/odamex-(.*)\.tar\.gz debian uupdate
+
+# Uncomment to find new files on sourceforge, for devscripts >= 2.9
+ http://sf.net/odamex/odamex-src-(.*)\.tar\.gz
+
+# Uncomment to find new files on GooglePages
+# http://example.googlepages.com/foo.html odamex-(.*)\.tar\.gz
